Typically, this is a warm-up question. Everyone's done it in CS1 at some point, but chances are they haven't had the
need to do it in the past year, but if you understand pointers, it should be relatively straight forward. And that's
one reason why they ask it.

I'm not going to teach you about pointers, since that's a whole chapter in C. I can tell you the general approach,
though.

The term "linked list" can be applied to any data structure that is not sequential in memory but is sequential by a
reference that is defined by an item's previous element. Like this...






A linked list must have two things. It must have some data in each node, and it must have a reference to the next node.

The general approach is to create a new empty linked list (a list reference that points at nothing).






Then pick off the elements at the front of one list and stack them onto the front of the new list one by one. Like
taking napkins out of one dispenser one by one and putting them back in a different dispenser.

The only trick is being careful to not accidentally drop any references while you do this.

First create a temporary variable to hold on to the front of the old list (head).





Then point the head at the 2nd element (which is the NEXT element from the node you just pulled off and stored in the
temporary variable).